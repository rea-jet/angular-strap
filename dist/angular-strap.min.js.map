{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","aside/aside.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","onSelect","$setViewValue","length","isDefined","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","showTimeout","showTimeoutTime","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","split","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetWidth","offsetHeight","delta","getViewportAdjustedDelta","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$bsCompiler","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","promise","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","run","autoToken","autoPlace","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","which","$root","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","PopoverFactory","$popover","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","lg","sm","modalClass","bsModal","modal","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","DateParserFactory","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","getDateForAttribute","today","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","AsideFactory","$aside","bsAside","aside","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular\n  .module('mgcrea.ngStrap.tooltip', [\n    'mgcrea.ngStrap.core',\n    'mgcrea.ngStrap.helpers.dimensions'\n  ])\n  .provider('$tooltip', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      showTimeout: false,\n      showTimeoutTime: 50,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    });\n\n    this.$get = function (\n      $window,\n      $rootScope,\n      $bsCompiler,\n      $q,\n      $templateCache,\n      $http,\n      $animate,\n      $sce,\n      dimensions,\n      $$rAF,\n      $timeout\n    ) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test(\n        $window.navigator.userAgent\n      );\n      var isTouch = 'createTouch' in $window.document && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n        debugger;\n        var $tooltip = {};\n\n        // Common vars\n        var options = ($tooltip.$options = angular.extend(\n          {},\n          defaults,\n          config\n        ));\n        var promise = ($tooltip.$promise = $bsCompiler.compile(options));\n        var scope = ($tooltip.$scope =\n          (options.scope && options.scope.$new()) || $rootScope.$new());\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay =\n            split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target)\n              ? options.target\n              : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n        };\n\n        $tooltip.destroy = function () {\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $tooltip.enter = function () {\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeShow) &&\n            angular.isFunction(options.onBeforeShow)\n          ) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (\n            clonedElement,\n            scope\n          ) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({\n            top: '-9999px',\n            left: '-9999px',\n            right: 'auto',\n            display: 'block',\n            visibility: 'hidden'\n          });\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type)\n            tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate\n              .enter(tipElement, parent, after)\n              .then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (\n            angular.isDefined(options.onShow) &&\n            angular.isFunction(options.onShow)\n          ) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeHide) &&\n            angular.isFunction(options.onBeforeHide)\n          ) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (\n            angular.isDefined(options.onHide) &&\n            angular.isFunction(options.onHide)\n          ) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          return options.showTimeout ? $timeout(run, options.showTimeoutTime) : run();\n\n          function run () {\n            if (!tipElement) return;\n\n            // Determine if we're doing an auto or normal placement\n            var placement = options.placement;\n            var autoToken = /\\s?auto?\\s?/i;\n            var autoPlace = autoToken.test(placement);\n\n            if (autoPlace) {\n              placement =\n                placement.replace(autoToken, '') || defaults.placement;\n            }\n\n            // Need to add the position class before we get\n            // the offsets\n            tipElement.addClass(options.placement);\n\n            // Get the position of the target element\n            // and the height and width of the tooltip so we can center it.\n            var elementPosition = getPosition();\n            var tipWidth = tipElement.prop('offsetWidth');\n            var tipHeight = tipElement.prop('offsetHeight');\n\n            // Refresh viewport position\n            $tooltip.$viewport =\n              options.viewport &&\n              findElement(options.viewport.selector || options.viewport);\n\n            // If we're auto placing, we need to check the positioning\n            if (autoPlace) {\n              var originalPlacement = placement;\n              var viewportPosition = getPosition($tooltip.$viewport);\n\n              if (\n                /bottom/.test(originalPlacement) &&\n                elementPosition.bottom + tipHeight > viewportPosition.bottom\n              ) {\n                placement = originalPlacement.replace('bottom', 'top');\n              } else if (\n                /top/.test(originalPlacement) &&\n                elementPosition.top - tipHeight < viewportPosition.top\n              ) {\n                placement = originalPlacement.replace('top', 'bottom');\n              }\n\n              if (\n                /left/.test(originalPlacement) &&\n                elementPosition.left - tipWidth < viewportPosition.left\n              ) {\n                placement = placement.replace('left', 'right');\n              } else if (\n                /right/.test(originalPlacement) &&\n                elementPosition.right + tipWidth > viewportPosition.width\n              ) {\n                placement = placement.replace('right', 'left');\n              }\n\n              tipElement.removeClass(originalPlacement).addClass(placement);\n            }\n\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(\n              placement,\n              elementPosition,\n              tipWidth,\n              tipHeight\n            );\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) {\n            evt.preventDefault();\n          }\n          if (options.mouseDownStopPropagation) {\n            evt.stopPropagation();\n          }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.on(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.off(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(\n            function () {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on('click', stopEventPropagation);\n\n              // Hide when clicking outside tooltip\n              $body.on('click', $tooltip.hide);\n\n              _autoCloseEventsBinded = true;\n            },\n            0,\n            false\n          );\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {\n              width: elRect.right - elRect.left,\n              height: elRect.bottom - elRect.top\n            });\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {\n            scroll: isBody\n              ? document.documentElement.scrollTop || document.body.scrollTop\n              : $element.prop('scrollTop') || 0\n          };\n          var outerDims = isBody\n            ? {\n              width: document.documentElement.clientWidth,\n              height: $window.innerHeight\n            }\n            : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(\n            tip,\n            angular.extend(\n              {\n                using: function (props) {\n                  tipElement.css({\n                    top: Math.round(props.top) + 'px',\n                    left: Math.round(props.left) + 'px',\n                    right: ''\n                  });\n                }\n              },\n              offset\n            ),\n            0\n          );\n\n          $timeout(function () {\n            // check to see if placing tip in new offset caused the tip to resize itself\n            var actualWidth = tip.offsetWidth;\n            var actualHeight = tip.offsetHeight;\n\n            if (placement === 'top' && actualHeight !== height) {\n              offset.top = offset.top + height - actualHeight;\n            }\n\n            // If it's an exotic placement, exit now instead of\n            // applying a delta and changing the arrow\n            if (/top-left|top-right|bottom-left|bottom-right/.test(placement))\n              return;\n\n            var delta = getViewportAdjustedDelta(\n              placement,\n              offset,\n              actualWidth,\n              actualHeight\n            );\n\n            if (delta.left) {\n              offset.left += delta.left;\n            } else {\n              offset.top += delta.top;\n            }\n\n            dimensions.setOffset(tip, offset);\n\n            if (/top|right|bottom|left/.test(placement)) {\n              var isVertical = /top|bottom/.test(placement);\n              var arrowDelta = isVertical\n                ? delta.left * 2 - width + actualWidth\n                : delta.top * 2 - height + actualHeight;\n              var arrowOffsetPosition = isVertical\n                ? 'offsetWidth'\n                : 'offsetHeight';\n\n              replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n            }\n          }, 50);\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding =\n            (options.viewport && options.viewport.padding) || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset =\n              position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset =\n              position.top +\n              viewportPadding -\n              viewportDimensions.scroll +\n              actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) {\n              // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (\n              bottomEdgeOffset >\n              viewportDimensions.top + viewportDimensions.height\n            ) {\n              // bottom overflow\n              delta.top =\n                viewportDimensions.top +\n                viewportDimensions.height -\n                bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) {\n              // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) {\n              // right overflow\n              delta.left =\n                viewportDimensions.left +\n                viewportDimensions.width -\n                rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow\n            .css(\n              isHorizontal ? 'left' : 'top',\n              50 * (1 - delta / dimension) + '%'\n            )\n            .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase ||\n          (scope.$root && scope.$root.$$phase) ||\n          scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n    };\n  })\n  .directive('bsTooltip', function (\n    $window,\n    $location,\n    $sce,\n    $parse,\n    $tooltip,\n    $$rAF\n  ) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'titleTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'backdropAnimation',\n            'type',\n            'customClass',\n            'id',\n            'showTimeout',\n            'showTimeoutTime'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (\n            angular.isDefined(attr[key]) &&\n            falseValueRegExp.test(attr[key])\n          ) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(\n            attr.bsTooltip,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.title = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                $$rAF(function () {\n                  if (tooltip) tooltip.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n      }\n    };\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular\n  .module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n  .provider('$popover', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false,\n      showTimeout: false,\n      showTimeoutTime: 50,\n    });\n\n    this.$get = function ($tooltip) {\n      function PopoverFactory (element, config) {\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n      }\n\n      return PopoverFactory;\n    };\n  })\n  .directive('bsPopover', function ($window, $sce, $popover) {\n    var requestAnimationFrame =\n      $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'contentTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'customClass',\n            'autoClose',\n            'id',\n            'prefixClass',\n            'prefixEvent',\n            'bsEnabled',\n            'showTimeout',\n            'showTimeoutTime'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(\n            attr.bsPopover,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.content = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        scope.$on('bs.placement', function () {\n          requestAnimationFrame(function () {\n            popover && popover.$applyPlacement();\n          });\n        });\n\n        scope.$on('$routeChangeStart', popover.hide);\n        scope.$on('bs.popover.hide', popover.hide);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n      }\n    };\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp) || [];\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        activeElement.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mgcrea.ngStrap.tooltip', [\n    'mgcrea.ngStrap.core',\n    'mgcrea.ngStrap.helpers.dimensions'\n  ])\n  .provider('$tooltip', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      showTimeout: false,\n      showTimeoutTime: 50,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    });\n\n    this.$get = function (\n      $window,\n      $rootScope,\n      $bsCompiler,\n      $q,\n      $templateCache,\n      $http,\n      $animate,\n      $sce,\n      dimensions,\n      $$rAF,\n      $timeout\n    ) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test(\n        $window.navigator.userAgent\n      );\n      var isTouch = 'createTouch' in $window.document && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n        debugger;\n        var $tooltip = {};\n\n        // Common vars\n        var options = ($tooltip.$options = angular.extend(\n          {},\n          defaults,\n          config\n        ));\n        var promise = ($tooltip.$promise = $bsCompiler.compile(options));\n        var scope = ($tooltip.$scope =\n          (options.scope && options.scope.$new()) || $rootScope.$new());\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay =\n            split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target)\n              ? options.target\n              : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n        };\n\n        $tooltip.destroy = function () {\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $tooltip.enter = function () {\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeShow) &&\n            angular.isFunction(options.onBeforeShow)\n          ) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (\n            clonedElement,\n            scope\n          ) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({\n            top: '-9999px',\n            left: '-9999px',\n            right: 'auto',\n            display: 'block',\n            visibility: 'hidden'\n          });\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type)\n            tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate\n              .enter(tipElement, parent, after)\n              .then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (\n            angular.isDefined(options.onShow) &&\n            angular.isFunction(options.onShow)\n          ) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeHide) &&\n            angular.isFunction(options.onBeforeHide)\n          ) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (\n            angular.isDefined(options.onHide) &&\n            angular.isFunction(options.onHide)\n          ) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          return options.showTimeout ? $timeout(run, options.showTimeoutTime) : run();\n\n          function run () {\n            if (!tipElement) return;\n\n            // Determine if we're doing an auto or normal placement\n            var placement = options.placement;\n            var autoToken = /\\s?auto?\\s?/i;\n            var autoPlace = autoToken.test(placement);\n\n            if (autoPlace) {\n              placement =\n                placement.replace(autoToken, '') || defaults.placement;\n            }\n\n            // Need to add the position class before we get\n            // the offsets\n            tipElement.addClass(options.placement);\n\n            // Get the position of the target element\n            // and the height and width of the tooltip so we can center it.\n            var elementPosition = getPosition();\n            var tipWidth = tipElement.prop('offsetWidth');\n            var tipHeight = tipElement.prop('offsetHeight');\n\n            // Refresh viewport position\n            $tooltip.$viewport =\n              options.viewport &&\n              findElement(options.viewport.selector || options.viewport);\n\n            // If we're auto placing, we need to check the positioning\n            if (autoPlace) {\n              var originalPlacement = placement;\n              var viewportPosition = getPosition($tooltip.$viewport);\n\n              if (\n                /bottom/.test(originalPlacement) &&\n                elementPosition.bottom + tipHeight > viewportPosition.bottom\n              ) {\n                placement = originalPlacement.replace('bottom', 'top');\n              } else if (\n                /top/.test(originalPlacement) &&\n                elementPosition.top - tipHeight < viewportPosition.top\n              ) {\n                placement = originalPlacement.replace('top', 'bottom');\n              }\n\n              if (\n                /left/.test(originalPlacement) &&\n                elementPosition.left - tipWidth < viewportPosition.left\n              ) {\n                placement = placement.replace('left', 'right');\n              } else if (\n                /right/.test(originalPlacement) &&\n                elementPosition.right + tipWidth > viewportPosition.width\n              ) {\n                placement = placement.replace('right', 'left');\n              }\n\n              tipElement.removeClass(originalPlacement).addClass(placement);\n            }\n\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(\n              placement,\n              elementPosition,\n              tipWidth,\n              tipHeight\n            );\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) {\n            evt.preventDefault();\n          }\n          if (options.mouseDownStopPropagation) {\n            evt.stopPropagation();\n          }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.on(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.off(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(\n            function () {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on('click', stopEventPropagation);\n\n              // Hide when clicking outside tooltip\n              $body.on('click', $tooltip.hide);\n\n              _autoCloseEventsBinded = true;\n            },\n            0,\n            false\n          );\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {\n              width: elRect.right - elRect.left,\n              height: elRect.bottom - elRect.top\n            });\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {\n            scroll: isBody\n              ? document.documentElement.scrollTop || document.body.scrollTop\n              : $element.prop('scrollTop') || 0\n          };\n          var outerDims = isBody\n            ? {\n              width: document.documentElement.clientWidth,\n              height: $window.innerHeight\n            }\n            : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(\n            tip,\n            angular.extend(\n              {\n                using: function (props) {\n                  tipElement.css({\n                    top: Math.round(props.top) + 'px',\n                    left: Math.round(props.left) + 'px',\n                    right: ''\n                  });\n                }\n              },\n              offset\n            ),\n            0\n          );\n\n          $timeout(function () {\n            // check to see if placing tip in new offset caused the tip to resize itself\n            var actualWidth = tip.offsetWidth;\n            var actualHeight = tip.offsetHeight;\n\n            if (placement === 'top' && actualHeight !== height) {\n              offset.top = offset.top + height - actualHeight;\n            }\n\n            // If it's an exotic placement, exit now instead of\n            // applying a delta and changing the arrow\n            if (/top-left|top-right|bottom-left|bottom-right/.test(placement))\n              return;\n\n            var delta = getViewportAdjustedDelta(\n              placement,\n              offset,\n              actualWidth,\n              actualHeight\n            );\n\n            if (delta.left) {\n              offset.left += delta.left;\n            } else {\n              offset.top += delta.top;\n            }\n\n            dimensions.setOffset(tip, offset);\n\n            if (/top|right|bottom|left/.test(placement)) {\n              var isVertical = /top|bottom/.test(placement);\n              var arrowDelta = isVertical\n                ? delta.left * 2 - width + actualWidth\n                : delta.top * 2 - height + actualHeight;\n              var arrowOffsetPosition = isVertical\n                ? 'offsetWidth'\n                : 'offsetHeight';\n\n              replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n            }\n          }, 50);\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding =\n            (options.viewport && options.viewport.padding) || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset =\n              position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset =\n              position.top +\n              viewportPadding -\n              viewportDimensions.scroll +\n              actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) {\n              // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (\n              bottomEdgeOffset >\n              viewportDimensions.top + viewportDimensions.height\n            ) {\n              // bottom overflow\n              delta.top =\n                viewportDimensions.top +\n                viewportDimensions.height -\n                bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) {\n              // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) {\n              // right overflow\n              delta.left =\n                viewportDimensions.left +\n                viewportDimensions.width -\n                rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow\n            .css(\n              isHorizontal ? 'left' : 'top',\n              50 * (1 - delta / dimension) + '%'\n            )\n            .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase ||\n          (scope.$root && scope.$root.$$phase) ||\n          scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n    };\n  })\n  .directive('bsTooltip', function (\n    $window,\n    $location,\n    $sce,\n    $parse,\n    $tooltip,\n    $$rAF\n  ) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'titleTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'backdropAnimation',\n            'type',\n            'customClass',\n            'id',\n            'showTimeout',\n            'showTimeoutTime'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (\n            angular.isDefined(attr[key]) &&\n            falseValueRegExp.test(attr[key])\n          ) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(\n            attr.bsTooltip,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.title = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                $$rAF(function () {\n                  if (tooltip) tooltip.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n  .provider('$popover', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false,\n      showTimeout: false,\n      showTimeoutTime: 50,\n    });\n\n    this.$get = function ($tooltip) {\n      function PopoverFactory (element, config) {\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n      }\n\n      return PopoverFactory;\n    };\n  })\n  .directive('bsPopover', function ($window, $sce, $popover) {\n    var requestAnimationFrame =\n      $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'contentTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'customClass',\n            'autoClose',\n            'id',\n            'prefixClass',\n            'prefixEvent',\n            'bsEnabled',\n            'showTimeout',\n            'showTimeoutTime'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(\n            attr.bsPopover,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.content = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        scope.$on('bs.placement', function () {\n          requestAnimationFrame(function () {\n            popover && popover.$applyPlacement();\n          });\n        });\n\n        scope.$on('$routeChangeStart', popover.hide);\n        scope.$on('bs.popover.hide', popover.hide);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp) || [];\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        activeElement.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"]}