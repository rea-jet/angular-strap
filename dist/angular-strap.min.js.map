{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","datepicker/datepicker.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","modal/modal.js","dropdown/dropdown.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","prefixClass","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","showTimeout","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","split","on","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetWidth","offsetHeight","delta","getViewportAdjustedDelta","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$bsCompiler","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","promise","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","run","autoToken","autoPlace","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","which","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","activeClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","prototype","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular\n  .module('mgcrea.ngStrap.tooltip', [\n    'mgcrea.ngStrap.core',\n    'mgcrea.ngStrap.helpers.dimensions'\n  ])\n  .provider('$tooltip', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      showTimeout: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    });\n\n    this.$get = function (\n      $window,\n      $rootScope,\n      $bsCompiler,\n      $q,\n      $templateCache,\n      $http,\n      $animate,\n      $sce,\n      dimensions,\n      $$rAF,\n      $timeout\n    ) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test(\n        $window.navigator.userAgent\n      );\n      var isTouch = 'createTouch' in $window.document && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n        debugger;\n        var $tooltip = {};\n\n        // Common vars\n        var options = ($tooltip.$options = angular.extend(\n          {},\n          defaults,\n          config\n        ));\n        var promise = ($tooltip.$promise = $bsCompiler.compile(options));\n        var scope = ($tooltip.$scope =\n          (options.scope && options.scope.$new()) || $rootScope.$new());\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay =\n            split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target)\n              ? options.target\n              : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n        };\n\n        $tooltip.destroy = function () {\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $tooltip.enter = function () {\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeShow) &&\n            angular.isFunction(options.onBeforeShow)\n          ) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (\n            clonedElement,\n            scope\n          ) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({\n            top: '-9999px',\n            left: '-9999px',\n            right: 'auto',\n            display: 'block',\n            visibility: 'hidden'\n          });\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type)\n            tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate\n              .enter(tipElement, parent, after)\n              .then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (\n            angular.isDefined(options.onShow) &&\n            angular.isFunction(options.onShow)\n          ) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeHide) &&\n            angular.isFunction(options.onBeforeHide)\n          ) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (\n            angular.isDefined(options.onHide) &&\n            angular.isFunction(options.onHide)\n          ) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          return options.showTimeout ? $timeout(run, 50) : run();\n\n          function run () {\n            if (!tipElement) return;\n\n            // Determine if we're doing an auto or normal placement\n            var placement = options.placement;\n            var autoToken = /\\s?auto?\\s?/i;\n            var autoPlace = autoToken.test(placement);\n\n            if (autoPlace) {\n              placement =\n                placement.replace(autoToken, '') || defaults.placement;\n            }\n\n            // Need to add the position class before we get\n            // the offsets\n            tipElement.addClass(options.placement);\n\n            // Get the position of the target element\n            // and the height and width of the tooltip so we can center it.\n            var elementPosition = getPosition();\n            var tipWidth = tipElement.prop('offsetWidth');\n            var tipHeight = tipElement.prop('offsetHeight');\n\n            // Refresh viewport position\n            $tooltip.$viewport =\n              options.viewport &&\n              findElement(options.viewport.selector || options.viewport);\n\n            // If we're auto placing, we need to check the positioning\n            if (autoPlace) {\n              var originalPlacement = placement;\n              var viewportPosition = getPosition($tooltip.$viewport);\n\n              if (\n                /bottom/.test(originalPlacement) &&\n                elementPosition.bottom + tipHeight > viewportPosition.bottom\n              ) {\n                placement = originalPlacement.replace('bottom', 'top');\n              } else if (\n                /top/.test(originalPlacement) &&\n                elementPosition.top - tipHeight < viewportPosition.top\n              ) {\n                placement = originalPlacement.replace('top', 'bottom');\n              }\n\n              if (\n                /left/.test(originalPlacement) &&\n                elementPosition.left - tipWidth < viewportPosition.left\n              ) {\n                placement = placement.replace('left', 'right');\n              } else if (\n                /right/.test(originalPlacement) &&\n                elementPosition.right + tipWidth > viewportPosition.width\n              ) {\n                placement = placement.replace('right', 'left');\n              }\n\n              tipElement.removeClass(originalPlacement).addClass(placement);\n            }\n\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(\n              placement,\n              elementPosition,\n              tipWidth,\n              tipHeight\n            );\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) {\n            evt.preventDefault();\n          }\n          if (options.mouseDownStopPropagation) {\n            evt.stopPropagation();\n          }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.on(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.off(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(\n            function () {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on('click', stopEventPropagation);\n\n              // Hide when clicking outside tooltip\n              $body.on('click', $tooltip.hide);\n\n              _autoCloseEventsBinded = true;\n            },\n            0,\n            false\n          );\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {\n              width: elRect.right - elRect.left,\n              height: elRect.bottom - elRect.top\n            });\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {\n            scroll: isBody\n              ? document.documentElement.scrollTop || document.body.scrollTop\n              : $element.prop('scrollTop') || 0\n          };\n          var outerDims = isBody\n            ? {\n              width: document.documentElement.clientWidth,\n              height: $window.innerHeight\n            }\n            : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(\n            tip,\n            angular.extend(\n              {\n                using: function (props) {\n                  tipElement.css({\n                    top: Math.round(props.top) + 'px',\n                    left: Math.round(props.left) + 'px',\n                    right: ''\n                  });\n                }\n              },\n              offset\n            ),\n            0\n          );\n\n          $timeout(function () {\n            // check to see if placing tip in new offset caused the tip to resize itself\n            var actualWidth = tip.offsetWidth;\n            var actualHeight = tip.offsetHeight;\n\n            if (placement === 'top' && actualHeight !== height) {\n              offset.top = offset.top + height - actualHeight;\n            }\n\n            // If it's an exotic placement, exit now instead of\n            // applying a delta and changing the arrow\n            if (/top-left|top-right|bottom-left|bottom-right/.test(placement))\n              return;\n\n            var delta = getViewportAdjustedDelta(\n              placement,\n              offset,\n              actualWidth,\n              actualHeight\n            );\n\n            if (delta.left) {\n              offset.left += delta.left;\n            } else {\n              offset.top += delta.top;\n            }\n\n            dimensions.setOffset(tip, offset);\n\n            if (/top|right|bottom|left/.test(placement)) {\n              var isVertical = /top|bottom/.test(placement);\n              var arrowDelta = isVertical\n                ? delta.left * 2 - width + actualWidth\n                : delta.top * 2 - height + actualHeight;\n              var arrowOffsetPosition = isVertical\n                ? 'offsetWidth'\n                : 'offsetHeight';\n\n              replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n            }\n          }, 50);\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding =\n            (options.viewport && options.viewport.padding) || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset =\n              position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset =\n              position.top +\n              viewportPadding -\n              viewportDimensions.scroll +\n              actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) {\n              // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (\n              bottomEdgeOffset >\n              viewportDimensions.top + viewportDimensions.height\n            ) {\n              // bottom overflow\n              delta.top =\n                viewportDimensions.top +\n                viewportDimensions.height -\n                bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) {\n              // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) {\n              // right overflow\n              delta.left =\n                viewportDimensions.left +\n                viewportDimensions.width -\n                rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow\n            .css(\n              isHorizontal ? 'left' : 'top',\n              50 * (1 - delta / dimension) + '%'\n            )\n            .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase ||\n          (scope.$root && scope.$root.$$phase) ||\n          scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n    };\n  })\n  .directive('bsTooltip', function (\n    $window,\n    $location,\n    $sce,\n    $parse,\n    $tooltip,\n    $$rAF\n  ) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'titleTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'backdropAnimation',\n            'type',\n            'customClass',\n            'id',\n            'showTimeout'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (\n            angular.isDefined(attr[key]) &&\n            falseValueRegExp.test(attr[key])\n          ) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(\n            attr.bsTooltip,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.title = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                $$rAF(function () {\n                  if (tooltip) tooltip.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n      }\n    };\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular\n  .module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n  .provider('$popover', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false,\n      showTimeout: false\n    });\n\n    this.$get = function ($tooltip) {\n      function PopoverFactory (element, config) {\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n      }\n\n      return PopoverFactory;\n    };\n  })\n  .directive('bsPopover', function ($window, $sce, $popover) {\n    var requestAnimationFrame =\n      $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'contentTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'customClass',\n            'autoClose',\n            'id',\n            'prefixClass',\n            'prefixEvent',\n            'bsEnabled',\n            'showTimeout'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(\n            attr.bsPopover,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.content = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        scope.$on('bs.placement', function () {\n          requestAnimationFrame(function () {\n            popover && popover.$applyPlacement();\n          });\n        });\n\n        scope.$on('$routeChangeStart', popover.hide);\n        scope.$on('bs.popover.hide', popover.hide);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n      }\n    };\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp) || [];\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        activeElement.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          // do not adjust date if timezone is UTC\n          if (options.timezone === 'UTC') {\n            controller.$dateValue = date;\n          } else {\n            controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          }\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mgcrea.ngStrap.tooltip', [\n    'mgcrea.ngStrap.core',\n    'mgcrea.ngStrap.helpers.dimensions'\n  ])\n  .provider('$tooltip', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      showTimeout: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    });\n\n    this.$get = function (\n      $window,\n      $rootScope,\n      $bsCompiler,\n      $q,\n      $templateCache,\n      $http,\n      $animate,\n      $sce,\n      dimensions,\n      $$rAF,\n      $timeout\n    ) {\n      var isNative = /(ip[ao]d|iphone|android)/gi.test(\n        $window.navigator.userAgent\n      );\n      var isTouch = 'createTouch' in $window.document && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n        debugger;\n        var $tooltip = {};\n\n        // Common vars\n        var options = ($tooltip.$options = angular.extend(\n          {},\n          defaults,\n          config\n        ));\n        var promise = ($tooltip.$promise = $bsCompiler.compile(options));\n        var scope = ($tooltip.$scope =\n          (options.scope && options.scope.$new()) || $rootScope.$new());\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay =\n            split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target)\n              ? options.target\n              : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n        };\n\n        $tooltip.destroy = function () {\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $tooltip.enter = function () {\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeShow) &&\n            angular.isFunction(options.onBeforeShow)\n          ) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (\n            clonedElement,\n            scope\n          ) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({\n            top: '-9999px',\n            left: '-9999px',\n            right: 'auto',\n            display: 'block',\n            visibility: 'hidden'\n          });\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type)\n            tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate\n              .enter(tipElement, parent, after)\n              .then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (\n            angular.isDefined(options.onShow) &&\n            angular.isFunction(options.onShow)\n          ) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (\n            angular.isDefined(options.onBeforeHide) &&\n            angular.isFunction(options.onBeforeHide)\n          ) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (\n            angular.isDefined(options.onHide) &&\n            angular.isFunction(options.onHide)\n          ) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) {\n            evt.preventDefault();\n          }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          return options.showTimeout ? $timeout(run, 50) : run();\n\n          function run () {\n            if (!tipElement) return;\n\n            // Determine if we're doing an auto or normal placement\n            var placement = options.placement;\n            var autoToken = /\\s?auto?\\s?/i;\n            var autoPlace = autoToken.test(placement);\n\n            if (autoPlace) {\n              placement =\n                placement.replace(autoToken, '') || defaults.placement;\n            }\n\n            // Need to add the position class before we get\n            // the offsets\n            tipElement.addClass(options.placement);\n\n            // Get the position of the target element\n            // and the height and width of the tooltip so we can center it.\n            var elementPosition = getPosition();\n            var tipWidth = tipElement.prop('offsetWidth');\n            var tipHeight = tipElement.prop('offsetHeight');\n\n            // Refresh viewport position\n            $tooltip.$viewport =\n              options.viewport &&\n              findElement(options.viewport.selector || options.viewport);\n\n            // If we're auto placing, we need to check the positioning\n            if (autoPlace) {\n              var originalPlacement = placement;\n              var viewportPosition = getPosition($tooltip.$viewport);\n\n              if (\n                /bottom/.test(originalPlacement) &&\n                elementPosition.bottom + tipHeight > viewportPosition.bottom\n              ) {\n                placement = originalPlacement.replace('bottom', 'top');\n              } else if (\n                /top/.test(originalPlacement) &&\n                elementPosition.top - tipHeight < viewportPosition.top\n              ) {\n                placement = originalPlacement.replace('top', 'bottom');\n              }\n\n              if (\n                /left/.test(originalPlacement) &&\n                elementPosition.left - tipWidth < viewportPosition.left\n              ) {\n                placement = placement.replace('left', 'right');\n              } else if (\n                /right/.test(originalPlacement) &&\n                elementPosition.right + tipWidth > viewportPosition.width\n              ) {\n                placement = placement.replace('right', 'left');\n              }\n\n              tipElement.removeClass(originalPlacement).addClass(placement);\n            }\n\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(\n              placement,\n              elementPosition,\n              tipWidth,\n              tipHeight\n            );\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) {\n            evt.preventDefault();\n          }\n          if (options.mouseDownStopPropagation) {\n            evt.stopPropagation();\n          }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.on(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(\n                trigger === 'hover' ? 'mouseenter' : 'focus',\n                $tooltip.enter\n              );\n              element.off(\n                trigger === 'hover' ? 'mouseleave' : 'blur',\n                $tooltip.leave\n              );\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(\n                  isTouch ? 'touchstart' : 'mousedown',\n                  $tooltip.$onFocusElementMouseDown\n                );\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(\n            function () {\n              // Stop propagation when clicking inside tooltip\n              tipElement.on('click', stopEventPropagation);\n\n              // Hide when clicking outside tooltip\n              $body.on('click', $tooltip.hide);\n\n              _autoCloseEventsBinded = true;\n            },\n            0,\n            false\n          );\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {\n              width: elRect.right - elRect.left,\n              height: elRect.bottom - elRect.top\n            });\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {\n            scroll: isBody\n              ? document.documentElement.scrollTop || document.body.scrollTop\n              : $element.prop('scrollTop') || 0\n          };\n          var outerDims = isBody\n            ? {\n              width: document.documentElement.clientWidth,\n              height: $window.innerHeight\n            }\n            : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(\n            tip,\n            angular.extend(\n              {\n                using: function (props) {\n                  tipElement.css({\n                    top: Math.round(props.top) + 'px',\n                    left: Math.round(props.left) + 'px',\n                    right: ''\n                  });\n                }\n              },\n              offset\n            ),\n            0\n          );\n\n          $timeout(function () {\n            // check to see if placing tip in new offset caused the tip to resize itself\n            var actualWidth = tip.offsetWidth;\n            var actualHeight = tip.offsetHeight;\n\n            if (placement === 'top' && actualHeight !== height) {\n              offset.top = offset.top + height - actualHeight;\n            }\n\n            // If it's an exotic placement, exit now instead of\n            // applying a delta and changing the arrow\n            if (/top-left|top-right|bottom-left|bottom-right/.test(placement))\n              return;\n\n            var delta = getViewportAdjustedDelta(\n              placement,\n              offset,\n              actualWidth,\n              actualHeight\n            );\n\n            if (delta.left) {\n              offset.left += delta.left;\n            } else {\n              offset.top += delta.top;\n            }\n\n            dimensions.setOffset(tip, offset);\n\n            if (/top|right|bottom|left/.test(placement)) {\n              var isVertical = /top|bottom/.test(placement);\n              var arrowDelta = isVertical\n                ? delta.left * 2 - width + actualWidth\n                : delta.top * 2 - height + actualHeight;\n              var arrowOffsetPosition = isVertical\n                ? 'offsetWidth'\n                : 'offsetHeight';\n\n              replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n            }\n          }, 50);\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (\n          placement,\n          position,\n          actualWidth,\n          actualHeight\n        ) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding =\n            (options.viewport && options.viewport.padding) || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset =\n              position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset =\n              position.top +\n              viewportPadding -\n              viewportDimensions.scroll +\n              actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) {\n              // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (\n              bottomEdgeOffset >\n              viewportDimensions.top + viewportDimensions.height\n            ) {\n              // bottom overflow\n              delta.top =\n                viewportDimensions.top +\n                viewportDimensions.height -\n                bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) {\n              // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) {\n              // right overflow\n              delta.left =\n                viewportDimensions.left +\n                viewportDimensions.width -\n                rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow\n            .css(\n              isHorizontal ? 'left' : 'top',\n              50 * (1 - delta / dimension) + '%'\n            )\n            .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase ||\n          (scope.$root && scope.$root.$$phase) ||\n          scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n    };\n  })\n  .directive('bsTooltip', function (\n    $window,\n    $location,\n    $sce,\n    $parse,\n    $tooltip,\n    $$rAF\n  ) {\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'titleTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'backdropAnimation',\n            'type',\n            'customClass',\n            'id',\n            'showTimeout'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (\n            angular.isDefined(attr[key]) &&\n            falseValueRegExp.test(attr[key])\n          ) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(\n            attr.bsTooltip,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.title = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                $$rAF(function () {\n                  if (tooltip) tooltip.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular\n  .module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n  .provider('$popover', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false,\n      showTimeout: false\n    });\n\n    this.$get = function ($tooltip) {\n      function PopoverFactory (element, config) {\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n      }\n\n      return PopoverFactory;\n    };\n  })\n  .directive('bsPopover', function ($window, $sce, $popover) {\n    var requestAnimationFrame =\n      $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'contentTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'customClass',\n            'autoClose',\n            'id',\n            'prefixClass',\n            'prefixEvent',\n            'bsEnabled',\n            'showTimeout'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(\n            attr.bsPopover,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.content = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        scope.$on('bs.placement', function () {\n          requestAnimationFrame(function () {\n            popover && popover.$applyPlacement();\n          });\n        });\n\n        scope.$on('$routeChangeStart', popover.hide);\n        scope.$on('bs.popover.hide', popover.hide);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp) || [];\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        activeElement.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}