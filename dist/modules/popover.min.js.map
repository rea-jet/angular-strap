{"version":3,"sources":["modules/popover.js"],"names":["angular","templateUrl","provider","contentTemplate","defaults","trigger","keyboard","html","title","content","delay","autoClose","showTimeout","showTimeoutTime","this","$get","PopoverFactory","options","$popover","$scope","element","config","$tooltip","restrict","directive","requestAnimationFrame","$window","link","scope","forEach","attr","falseValueRegExp","key","bsKey","isDefined","charAt","toUpperCase","slice","test","dataTarget","target","$eval","$observe","newValue","oldValue","$sce","trustAsHtml","$watch","bsPopover","$applyPlacement","popover","extend","bsShow","isString","match","bsEnabled","viewport","setViewport","$on","destroy","hide"],"mappings":"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","file":"popover.min.js","sourcesContent":["'use strict';\n\nangular\n  .module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n  .provider('$popover', function () {\n    var defaults = (this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false,\n      showTimeout: false,\n      showTimeoutTime: 50,\n    });\n\n    this.$get = function ($tooltip) {\n      function PopoverFactory (element, config) {\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n      }\n\n      return PopoverFactory;\n    };\n  })\n  .directive('bsPopover', function ($window, $sce, $popover) {\n    var requestAnimationFrame =\n      $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(\n          [\n            'template',\n            'templateUrl',\n            'controller',\n            'controllerAs',\n            'contentTemplate',\n            'placement',\n            'container',\n            'delay',\n            'trigger',\n            'html',\n            'animation',\n            'customClass',\n            'autoClose',\n            'id',\n            'prefixClass',\n            'prefixEvent',\n            'bsEnabled',\n            'showTimeout',\n            'showTimeoutTime'\n          ],\n          function (key) {\n            if (angular.isDefined(attr[key])) options[key] = attr[key];\n          }\n        );\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(\n          ['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'],\n          function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          }\n        );\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(\n            attr.bsPopover,\n            function (newValue, oldValue) {\n              if (angular.isObject(newValue)) {\n                angular.extend(scope, newValue);\n              } else {\n                scope.content = newValue;\n              }\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            },\n            true\n          );\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue))\n              newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        scope.$on('bs.placement', function () {\n          requestAnimationFrame(function () {\n            popover && popover.$applyPlacement();\n          });\n        });\n\n        scope.$on('$routeChangeStart', popover.hide);\n        scope.$on('bs.popover.hide', popover.hide);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n      }\n    };\n  });\n"]}